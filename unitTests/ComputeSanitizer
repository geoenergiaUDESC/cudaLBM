#*---------------------------------------------------------------------------*#
#                                                                             #
# cudaLBM: CUDA-based moment representation Lattice Boltzmann Method          #
# Developed at UDESC - State University of Santa Catarina                     #
# Website: https://www.udesc.br                                               #
# Github: https://github.com/geoenergiaUDESC/cudaLBM                          #
#                                                                             #
#*---------------------------------------------------------------------------*#

#!/bin/bash

# Unset all variables at the beginning
unset DEVICES_OUTPUT CLEAN_DEVICES GPUS COMMON_FLAGS TOOLS TIMESTAMP LOG_DIR
unset RESULTS FAILED_TESTS SKIPPED_TESTS GPU TOOL TEST_NAME LOG_FILE EXIT_CODE
unset TOTAL_TESTS FAILED_COUNT SKIPPED_COUNT PASSED_COUNT EXIT_STATUS

# Check if computeVersion exists - exit if not found
if ! command -v computeVersion >/dev/null 2>&1; then
    printf "CUDALBM_CUDA_DIR is not set. Please run \"source bashrc\" in the project directory first\n" >&2
    # Clean up all variables at the end
    unset DEVICES_OUTPUT CLEAN_DEVICES GPUS COMMON_FLAGS TOOLS TIMESTAMP LOG_DIR
    unset RESULTS FAILED_TESTS SKIPPED_TESTS GPU TOOL TEST_NAME LOG_FILE EXIT_CODE
    unset TOTAL_TESTS FAILED_COUNT SKIPPED_COUNT PASSED_COUNT EXIT_STATUS
    return 1 2>/dev/null || exit 1
fi

# Run computeVersion and capture its output
DEVICES_OUTPUT=$(computeVersion -countDevices)

# Remove parentheses and convert to array
if [ "$DEVICES_OUTPUT" = "()" ]; then
    GPUS=()
    printf "No GPUs detected by computeVersion. Test execution aborted.\n" >&2
    # Clean up all variables at the end
    unset DEVICES_OUTPUT CLEAN_DEVICES GPUS COMMON_FLAGS TOOLS TIMESTAMP LOG_DIR
    unset RESULTS FAILED_TESTS SKIPPED_TESTS GPU TOOL TEST_NAME LOG_FILE EXIT_CODE
    unset TOTAL_TESTS FAILED_COUNT SKIPPED_COUNT PASSED_COUNT EXIT_STATUS
    return 1 2>/dev/null || exit 1
else
    # Remove parentheses and convert to array
    CLEAN_DEVICES="${DEVICES_OUTPUT//[()]/}"
    GPUS=($CLEAN_DEVICES)
fi

# Safe to go into directory now
cd ComputeSanitizerTest

# Define common flags
COMMON_FLAGS="--print-limit 1000 --check-bulk-copy=yes --check-device-heap=yes --check-exit-code=yes --racecheck-detect-level=error --racecheck-memcpy-async=yes --racecheck-num-workers=0 --racecheck-report=analysis --check-optix-leaks --check-warpgroup-mma=yes --check-api-memory-access=yes --check-optix --track-unused-memory"

# Define tools to test
TOOLS=("memcheck" "racecheck" "synccheck" "initcheck")

# Create a timestamp for log files
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
LOG_DIR="logs/log_$TIMESTAMP"
mkdir -p "$LOG_DIR"

# Arrays to store results
RESULTS=()
FAILED_TESTS=()
SKIPPED_TESTS=()

# Print header using printf
printf "/*---------------------------------------------------------------------------*\\ \n"
printf "|                                                                             |\n"
printf "| cudaLBM: CUDA-based moment representation Lattice Boltzmann Method          |\n"
printf "| Developed at UDESC - State University of Santa Catarina                     |\n"
printf "| Website: https://www.udesc.br                                               |\n"
printf "| Github: https://github.com/geoenergiaUDESC/cudaLBM                          |\n"
printf "|                                                                             |\n"
printf "\\*---------------------------------------------------------------------------*/\n"
printf "\n"
printf "ComputeSanitizer:\n"
printf "{\n"
printf "    deviceList: [%s];\n" "${GPUS[*]}"
printf "    Log directory: %s\n" "$LOG_DIR"
printf "\n"

# Run tests for each GPU
for GPU in "${GPUS[@]}"; do
    printf "    GPU %d:\n" "$GPU"
    printf "    {\n"
    for TOOL in "${TOOLS[@]}"; do
        TEST_NAME="${TOOL}"
        LOG_FILE="$LOG_DIR/${TEST_NAME}_GPU${GPU}.log"
        
        printf "        %s:" "$TEST_NAME"
        
        # Clean case and run test, capturing output and exit code
        source cleanCase.sh
        compute-sanitizer --tool="$TOOL" $COMMON_FLAGS momentBasedD3Q19 -GPU "$GPU" > "$LOG_FILE" 2>&1
        EXIT_CODE=$?
        
        # Store result based on exit code
        case $EXIT_CODE in
            0)
                RESULTS+=("$TEST_NAME on GPU $GPU: PASS")
                printf " PASS\n"
                ;;
            101)
                RESULTS+=("$TEST_NAME on GPU $GPU: SKIPPED (NO GPU)")
                SKIPPED_TESTS+=("$TEST_NAME on GPU $GPU")
                printf " SKIPPED (NO GPU)\n"
                ;;
            *)
                RESULTS+=("$TEST_NAME on GPU $GPU: FAIL (exit code: $EXIT_CODE)")
                FAILED_TESTS+=("$TEST_NAME on GPU $GPU")
                printf " FAIL (exit code: %d)\n" "$EXIT_CODE"
                ;;
        esac
    done
    printf "    };\n"
    printf "\n"
done

# Clean up and exit directory
source cleanCase.sh
cd ../

# Print summary

# Calculate counts before using them
TOTAL_TESTS=${#RESULTS[@]}
FAILED_COUNT=${#FAILED_TESTS[@]}
SKIPPED_COUNT=${#SKIPPED_TESTS[@]}
PASSED_COUNT=$((TOTAL_TESTS - FAILED_COUNT - SKIPPED_COUNT))

# Only show detailed results if there are failures
if [ $FAILED_COUNT -gt 0 ]; then
    for result in "${RESULTS[@]}"; do
        printf "%s\n" "$result"
    done
    printf "\n"
fi

# Final status
if [ $FAILED_COUNT -eq 0 ]; then
    if [ $SKIPPED_COUNT -eq 0 ]; then
        printf "    All unit tests passed (%d/%d)\n" "$PASSED_COUNT" "$TOTAL_TESTS"
    else
        printf "    All unit tests passed (%d/%d), %d skipped\n" "$PASSED_COUNT" "$TOTAL_TESTS" "$SKIPPED_COUNT"
    fi
    EXIT_STATUS=0
else
    printf "    Some unit tests failed (%d/%d passed, %d skipped)\n" "$PASSED_COUNT" "$TOTAL_TESTS" "$SKIPPED_COUNT"
    printf "\n"
    printf "    Failed tests:\n"
    for test in "${FAILED_TESTS[@]}"; do
        printf "      - %s\n" "$test"
    done
    if [ $SKIPPED_COUNT -gt 0 ]; then
        printf "\n"
        printf "    Skipped tests (no GPU available):\n"
        for test in "${SKIPPED_TESTS[@]}"; do
            printf "      - %s\n" "$test"
        done
    fi
    printf "\n"
    printf "    Check individual log files in: ComputeSanitizerTest/%s\n" "$LOG_DIR"
    EXIT_STATUS=1
fi
printf "};\n"

# Clean up all variables at the end
unset DEVICES_OUTPUT CLEAN_DEVICES GPUS COMMON_FLAGS TOOLS TIMESTAMP LOG_DIR
unset RESULTS FAILED_TESTS SKIPPED_TESTS GPU TOOL TEST_NAME LOG_FILE EXIT_CODE
unset TOTAL_TESTS FAILED_COUNT SKIPPED_COUNT PASSED_COUNT EXIT_STATUS

# Use return instead of exit to avoid closing the terminal
return $EXIT_STATUS 2>/dev/null || exit $EXIT_STATUS